package com.dogfood.codegen.processor;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.function.Predicate;

import javax.annotation.processing.RoundEnvironment;
import javax.lang.model.element.Element;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.TypeElement;
import javax.lang.model.element.VariableElement;
import javax.lang.model.util.ElementFilter;
import javax.tools.Diagnostic.Kind;

import com.dogfood.codegen.annotation.FieldDesc;
import com.dogfood.codegen.context.ProcessingEnvironmentHolder;
import com.dogfood.codegen.spi.CodeGenProcessor;
import com.squareup.javapoet.AnnotationSpec;
import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.FieldSpec;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.TypeName;
import com.squareup.javapoet.TypeSpec;
import io.swagger.v3.oas.annotations.media.Schema;
import lombok.Data;

/**
 * 代码生成器基础类
 * @author zhongfupeng
 */
public abstract class BaseCodeGenProcessor implements CodeGenProcessor {

    protected static final String PREFIX = "Base";

    @Override
    public void generate(TypeElement typeElement, RoundEnvironment roundEnv) throws Exception {
        generateClass(typeElement, roundEnv);
        // 其他文件生成逻辑往下扩展
    }

    /**
     * 生成class类
     * @param typeElement
     * @param roundEnv
     * @throws Exception
     */
    protected abstract void generateClass(TypeElement typeElement, RoundEnvironment roundEnv) throws Exception;

    /**
     * 为类添加get/setter方法
     * @param builder
     * @param fields
     */
    protected void addSetterAndGetterMethod(TypeSpec.Builder builder, List<VariableElement> fields) {
        for (VariableElement ve : fields) {
            TypeName typeName = TypeName.get(ve.asType());

            // 添加属性
            FieldSpec fieldSpec = FieldSpec
                .builder(typeName, ve.getSimpleName().toString(), Modifier.PRIVATE)
                .addAnnotation(
                    AnnotationSpec
                        .builder(Schema.class)
                        .addMember("title", "$S", getFieldDesc(ve))
                        .build())
                .build();
            builder.addField(fieldSpec);

            // 添加getter
            MethodSpec getMethod = MethodSpec.methodBuilder(this.getGetterName(ve))
                .returns(typeName)
                .addModifiers(Modifier.PUBLIC)
                .addStatement("return this.$L", ve.getSimpleName())
                .build();
            builder.addMethod(getMethod);

            // 添加setter
            MethodSpec setMethod = MethodSpec.methodBuilder(this.getSetterName(ve))
                .returns(void.class)
                .addModifiers(Modifier.PUBLIC)
                .addParameter(typeName, ve.getSimpleName().toString())
                .addStatement("this.$L = $L", ve.getSimpleName(), ve.getSimpleName())
                .build();
            builder.addMethod(setMethod);
        }
    }

    /**
     * 生成子类
     * @param sourceName
     * @param packageName
     * @param superClassName
     * @return
     */
    public TypeSpec.Builder getSourceTypeFromSupperClass(String sourceName, String packageName, String superClassName) {
        TypeSpec.Builder builder = TypeSpec.classBuilder(sourceName)
            .superclass(ClassName.get(packageName, superClassName))
            .addModifiers(Modifier.PUBLIC)
            .addAnnotation(Schema.class)
            .addAnnotation(Data.class);
        return builder;
    }

    /**
     * 生成Java文件
     * @param packageName
     * @param builder
     */
    protected void genJavaFile(String packageName, TypeSpec.Builder builder) {
        JavaFile javaFile = JavaFile.builder(packageName, builder.build())
            .addFileComment("---Auto Generated by DogFood ---").build();
        try {
            // 生成源文件并进行编译
            javaFile.writeTo(ProcessingEnvironmentHolder.getEnvironment().getFiler());
        } catch (IOException e) {
            ProcessingEnvironmentHolder.getEnvironment().getMessager()
                .printMessage(Kind.ERROR, e.getMessage());
        }
    }

    /**
     * 获取所有属性
     * @param typeElement
     * @param predicate
     * @return
     */
    protected List<VariableElement> findFields(TypeElement typeElement, Predicate<VariableElement> predicate) {
        List<? extends Element> enclosedElements = typeElement.getEnclosedElements();
        List<VariableElement> candidateFields = ElementFilter.fieldsIn(enclosedElements);
        List<VariableElement> fields = new ArrayList<>();
        for (VariableElement candidateField : candidateFields) {
            if (predicate.test(candidateField)){
                fields.add(candidateField);
            }
        }
        return fields;
    }

    /**
     * 获取属性描述
     * @param ve
     * @return
     */
    private String getFieldDesc(VariableElement ve) {
        return Optional.ofNullable(ve.getAnnotation(FieldDesc.class))
            .map(FieldDesc::name)
            .orElse(ve.getSimpleName().toString());
    }

    /**
     * 获取getter方法
     * @param ve
     * @return
     */
    protected String getGetterName(VariableElement ve) {
        return "get" + this.capitalize(ve.getSimpleName().toString());
    }

    /**
     * 获取setter方法
     * @param ve
     * @return
     */
    protected String getSetterName(VariableElement ve) {
        return "set" + this.capitalize(ve.getSimpleName().toString());
    }

    /**
     * 将字符串首字母大写
     * @param s
     * @return
     */
    private String capitalize(String s) {
        return s.substring(0, 1).toUpperCase() + s.substring(1);
    }
}
